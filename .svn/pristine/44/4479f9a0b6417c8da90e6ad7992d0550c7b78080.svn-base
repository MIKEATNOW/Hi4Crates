package kr.or.ddit.service.impl;

import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.mapper.IFileMapper;
import kr.or.ddit.mapper.IMainChartMapper;
import kr.or.ddit.service.IMainChartService;
import kr.or.ddit.vo.AttachmentVO;
import kr.or.ddit.vo.ChartVO;
import kr.or.ddit.vo.CommonCodeVO;
import kr.or.ddit.vo.DiagnosisVO;
import kr.or.ddit.vo.DiseaseVO;
import kr.or.ddit.vo.GroupOrderDetailVO;
import kr.or.ddit.vo.GroupOrderVO;
import kr.or.ddit.vo.MedicineVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.OrderVO;
import kr.or.ddit.vo.PrescriptionVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class MainChartServiceImpl implements IMainChartService {
	
	@Inject
	private IMainChartMapper mapper;
	
	@Inject
	private IFileMapper fileMapper;
	
	@Override
	public List<MemberVO> getWatingList(int empNo) {
		
		return mapper.getWatingList(empNo);
	}

	@Override
	public List<ChartVO> getPatientChart(int memNo) {
		
		return mapper.getPatientChart(memNo);
	}
	
	@Override
	public List<DiagnosisVO> getDiseaseList(int chartNo) {
		return mapper.getDiseaseList(chartNo);
	}


	@Override
	public MemberVO patientPreview(int memNo) {
		return mapper.patientPreview(memNo);
	}

	@Override
	public ServiceResult orderRadiation(OrderVO orderVO) {
		
		ServiceResult result=null;
		
		int status = mapper.orderRadiation(orderVO);
		
		if(status>0) {
			result=ServiceResult.OK;
		}else {
			result=ServiceResult.FAILED;
		}
		return result;
		
		
	}

	@Override
	public ServiceResult createChart(ChartVO chartVO) {
		
		ServiceResult result = null;
		
		int status = mapper.createChart(chartVO);
		
		if(status>0) {
			result=ServiceResult.OK;
		}else {
			result=ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public List<MedicineVO> getMedicineList(int chartNo) {
		
		return mapper.getMedicineList(chartNo);
	}

	@Override
	public List<CommonCodeVO> getPtList(int chartNo) {
		return mapper.getPtList(chartNo);
	}

	@Override
	public List<DiseaseVO> searchDisease() {
		return mapper.searchDisease();
	}

	@Override
	public List<MedicineVO> searchMedicine() {
		return mapper.searchMedicine();
	}

	@Override
	public ServiceResult insertChart(ChartVO chartVO) {
		ServiceResult result = null;
		
		int status = mapper.insertChart(chartVO);
		
		if(status>0) {
			result=ServiceResult.OK;
		}else {
			result=ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public ServiceResult insertDiagnosis(DiagnosisVO primaryDiagnosisVO) {
		ServiceResult result = null;
		
		int status = mapper.insertDiagnosis(primaryDiagnosisVO);
		
		if(status>0) {
			result=ServiceResult.OK;
		}else {
			result=ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public ServiceResult insertMedicineOrder(OrderVO orderMedicine) {
		ServiceResult result = null;
		
		int status = mapper.insertMedicineOrder(orderMedicine);
		
		if(status>0) {
			result=ServiceResult.OK;
		}else {
			result=ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public ServiceResult insertPrescription(PrescriptionVO prescriptionVO) {
		ServiceResult result = null;
		int status = mapper.insertPrescription(prescriptionVO);
		if(status>0) {
			result=ServiceResult.OK;
		}else {
			result=ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public ServiceResult insertPtOrder(OrderVO orderPt) {
		ServiceResult result = null;
		int status = mapper.insertPtOrder(orderPt);
		if(status>0) {
			result=ServiceResult.OK;
		}else {
			result=ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public ServiceResult createGroupOrder(GroupOrderVO groupOrderVO) {
		ServiceResult result = null;
		int status = mapper.createGroupOrder(groupOrderVO);
		if(status>0) {
			result=ServiceResult.OK;
		}else {
			result=ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public ServiceResult insertGroupOrderDetail(GroupOrderDetailVO groupOrderDetail) {
		ServiceResult result = null;
		int status = mapper.insertGroupOrderDetail(groupOrderDetail);
		if(status>0) {
			result=ServiceResult.OK;
		}else {
			result=ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public ServiceResult insertSecondDiagnosis(DiagnosisVO secondaryDiagnosisVO) {
		ServiceResult result = null;
		int status = mapper.insertSecondDiagnosis(secondaryDiagnosisVO);
		if(status>0) {
			result=ServiceResult.OK;
		}else {
			result=ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public ServiceResult insertImg(HttpServletRequest req, ChartVO chartVO) {
		ServiceResult result = null;
		
		List<AttachmentVO> fileList = chartVO.getFileList();
		
		try {
			chartFileUpload(fileList, chartVO, req);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
		
//		for(MultipartFile file : fileList) {
//			log.info("타입 : "+file.getContentType());
//			log.info("이름 : " +file.getName());
//			log.info("사이즈 : "+file.getSize());
//			log.info("저장이름 : "+chartVO.getImgData());
//			
//			AttachmentVO fileVO = new AttachmentVO();
//			fileVO.setAttachType(file.getContentType());
//			fileVO.setAttachName(chartVO.getImgData().substring(chartVO.getImgData().lastIndexOf("/")+1));
//			fileVO.setAttachSize(file.getSize());
//			fileVO.setAttachPath(chartVO.getImgData().substring(0, chartVO.getImgData().lastIndexOf("/")+1));
//			fileVO.setAttachLoc("/chartImg");
//			
//			fileMapper.attachmentGroup(fileVO);
//			fileMapper.uploadChartImg(fileVO);
//			chartVO.setAttachmentGroupNo(fileVO.getAttachmentGroupNo());
//		
//		}
		
		
//		int status = mapper.insertImg(chartVO);
		
		
//		if(status>0) {
//			result=ServiceResult.OK;
//		}else {
//			result=ServiceResult.FAILED;
//		}
//		return result;
	}
	
	private void chartFileUpload(List<AttachmentVO> chartFileList,  ChartVO chartVO, HttpServletRequest req) throws Exception {
		//공지사항 게시판에서 등록된 파일은 기본 '/resources/notice/'경로로 설정
		String savePath = "/resources/chart/";
		
		if(chartFileList !=null) {	//넘겨받은 파일 데이터가 존재할 때
			if(chartFileList.size() >0) {
				for(AttachmentVO attachmentVO : chartFileList) {
					String saveName = UUID.randomUUID().toString(); //UUID의 파일명 생성
					//파일명을 설정할 때 원본 파일명과 UUID_와 합쳐서 파일명을 만든다.
					saveName += "_" + attachmentVO.getAttachName();
					//boNo를 추가한 이유는 유지보수할때 편리하게 하기 위해(게시글 번호를 폴더구조로 만들어 놔서 그 게시글 번호 안에 들어있는 모든 파일들을 관리하기 용이)
					String saveLocate = req.getServletContext().getRealPath(savePath + chartVO.getChartNo());
					File file = new File(saveLocate);
					if(!file.exists()) {	//업로드를 하기 위한 폴더 구조가 존재하지 않을 때
						file.mkdirs();	//폴더 생성
					}
							
					saveLocate +="/" + saveName;	//실제 업로드할 경로(파일명 포함)
					
					attachmentVO.setChartNo(chartVO.getChartNo());						//게시글 번호 설정
					attachmentVO.setAttachPath(saveLocate);		//파일 업로드 경로 설정
					attachmentVO.setAttachLoc("/chart");		//파일 업로드 경로 설정
					
					mapper.attachmentGroup(attachmentVO);
					mapper.insertChartFile(attachmentVO);	//게시글 파일 데이터 추가
					mapper.insertChartImgNo(attachmentVO);
					
					File saveFile = new File(saveLocate);
					attachmentVO.getItem().transferTo(saveFile);	//파일 복사
				}
			}
		}
	}
	









}
