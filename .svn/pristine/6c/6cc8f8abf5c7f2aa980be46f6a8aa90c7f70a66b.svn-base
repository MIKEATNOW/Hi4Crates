package kr.or.ddit.controller.doctor;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.apache.commons.collections.map.HashedMap;
import org.springframework.core.OrderComparator;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.service.IMainChartService;
import kr.or.ddit.vo.ChartVO;
import kr.or.ddit.vo.MedicineVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.OrderVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/doctor")
@Slf4j
public class mainChartController {
	
	@Inject
	IMainChartService mainChartService;
	
	@GetMapping("/mainChart")
	public String mainChart(Model model) {
		
		log.info("mainChart() 실행...!");
		
		int empNo=1;
		
		List<MemberVO> watingList = mainChartService.getWatingList(empNo);
		
		model.addAttribute("watingList", watingList);
		
		return "doctor/mainChart";
		
	}
//	@ResponseBody
//	@GetMapping("/Chart")
//	public void Chart(Model model) {
//		
//		log.info("chart 실행...!");
//		
//		int empNo=1;
//		
//		List<MemberVO> watingList = mainChartService.getWatingList(empNo);
//		
//		model.addAttribute("watingList", watingList);
//		
//	}
	
	//동적으로 환자목록 불러오기
	@GetMapping("/getWatingList")
	@ResponseBody
	public ResponseEntity<List<MemberVO>> getWatingList(){
		
		log.info("getWatingList() 실행...!");
		
		int empNo=1;
		List<MemberVO> watingList = mainChartService.getWatingList(empNo);
		
		return new ResponseEntity<List<MemberVO>>(watingList, HttpStatus.OK);
	}
	
	
	//대기환자에서 환자이름 클릭시 미리보기 나오게 하기
	@ResponseBody
	@PostMapping("/patientPreview")
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	public ResponseEntity<MemberVO> patientPreview(@RequestBody Map<String, String> map){
		log.info("getPatientChart() 실행...!");
		
		int memNo = Integer.parseInt(map.get("memNo"));
		
		log.info("회원번호 : " +memNo);
		
		MemberVO patientPreview= mainChartService.patientPreview(memNo);
		
		
		return new ResponseEntity<MemberVO>(patientPreview, HttpStatus.OK);
		
		
	}
	
	//대기환자에서 환자이름 클릭시 환자차트 불러오기
	@ResponseBody
	@PostMapping("/patientChart")
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	public ResponseEntity<List<ChartVO>> getPatientChart(@RequestBody Map<String, String> map){
		log.info("getPatientChart() 실행...!");
		
		
		
		int memNo = Integer.parseInt(map.get("memNo"));
		
		log.info("회원번호 : " +memNo);
		
		//차트번호, 차트날짜, 진료이력, 상병코드, 상병명 가져옴
		List<ChartVO> patientChartList= mainChartService.getPatientChart(memNo);
		
		//각 차트 번호에 대한 약물 목록을 담는 맵을 선언
		Map<Integer, List<MedicineVO>> allMedicineMap = new HashMap<>();
		
		
	
			for(ChartVO chartVO : patientChartList) {
				int chartNo = chartVO.getChartNo();
				List<MedicineVO> medicineList = mainChartService.getMedicineList(chartNo);
				allMedicineMap.put(chartNo, medicineList);
			}
			
			
			List chartList = new ArrayList();
			chartList.add(patientChartList);
			chartList.add(allMedicineMap);

		
		
		return new ResponseEntity<List<ChartVO>>(chartList, HttpStatus.OK);
		
	}
	
	//방사선 검사 요청하기
	@PostMapping("/orderRadiation")
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	public String orderRadiation(OrderVO orderVO, Model model, RedirectAttributes ra) {
		
		String message="";
		
		
		log.info("orderRadiation() 실행...!");
		log.info("orderVO정보" + orderVO.getPatntNo());
		log.info("receiptNo정보 " + orderVO.getReceiptNo());
		
		
		int patntNo = Integer.parseInt(orderVO.getPatntNo());
		int receiptNo = Integer.parseInt(orderVO.getReceiptNo());
		
		ChartVO chartVO = new ChartVO();
		chartVO.setPatntNo(patntNo);
		chartVO.setReceiptNo(receiptNo);
		
		log.info("선택된 바디파트 " + orderVO.getBodyPartList());
		log.info("선택된 검사장비 " + orderVO.getCheckTechnique());
		
		orderVO.setOrderCode(orderVO.getCheckTechnique());
		orderVO.setBodyCode(orderVO.getBodyPartList());
		
		ServiceResult result1 = mainChartService.createChart(chartVO);
		
		log.info("생성된 차트 번호 " + chartVO.getChartNo());
		
		orderVO.setChartNo(chartVO.getChartNo());
		
//		if(result1.equals(ServiceResult.OK)) {
//			message="성공";
//			
//			
//		}else {
//			message="실패";
//		}
//		
		orderVO.setEmpNo(1);
		
		ServiceResult result = mainChartService.orderRadiation(orderVO);
		
		return "redirect:/doctor/mainChart";
		
	}

}
