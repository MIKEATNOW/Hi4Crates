package kr.or.ddit.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.service.IEmpNoticeService;
import kr.or.ddit.vo.EmpNoticeVO;
import kr.or.ddit.vo.PaginationVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/emp/notice")
@Slf4j
public class EmpNoticeController {
	// 리턴할 때 tiles는 main/ 으로 시작하기
	@Inject
	private IEmpNoticeService noticeService;
	
	// 직원용 공지사항 글쓰기 화면으로 이동
	@GetMapping("/form")
	public String getEmpNoticeForm () {
		log.info("[getEmpNoticeForm] 실행");
		return "empNotice/empNoticeForm";
	}
	
	// 직원용 공지사항 글쓰기 등록 처리
	@PostMapping("/insert.do")
	public String registerEmpNotice (EmpNoticeVO empNoticeVO, Model model) {
		log.info("[registerEmpNotice] 실행");
		String goPage = "";
		
		ServiceResult result = noticeService.postEmpNotice(empNoticeVO);
		
		if(result.equals(ServiceResult.OK)) {
			goPage = "redirect:/emp/notice/detail?empNoticeNo=" + empNoticeVO.getEmpNoticeNo();
		}else {
			goPage = "empNotice/form";
		}
		return goPage;
	}
	
	// 직원용 공지사항 목록
	@RequestMapping(value = "/list")
	public String getEmpNoticeList (
			@RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
			Model model
			) {
		log.info("[getEmpNoticeList] 실행");
		PaginationVO<EmpNoticeVO> pagingVO = new PaginationVO<EmpNoticeVO>();
		
		// 검색 기능 추가 자리
		
		pagingVO.setCurrentPage(currentPage);
		int totalRecord = noticeService.getEmpNoticeCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		
		List<EmpNoticeVO> dataList = noticeService.getEmpNoticeList(pagingVO);
		pagingVO.setDataList(dataList);
		
		model.addAttribute("pagingVO", pagingVO);
		return "empNotice/empNoticeList";
	}
	
	// 직원용 공지사항 상세보기 띄우기
	@RequestMapping(value="/detail", method = RequestMethod.GET)
	public String getEmpNoticeDetail(
			int empNoticeNo, Model model
			) {
		log.info("[getEmpNoticeDetail] 실행");
		String goPage = "";
		log.info("[getEmpNoticeDetail] empNoticeNo는? " + empNoticeNo);
		EmpNoticeVO empNoticeVO = noticeService.selectEmpNoticeDetail(empNoticeNo);
		log.info("[getEmpNoticeDetail] VO값은? " + empNoticeVO);
		model.addAttribute("empNoticeVO", empNoticeVO);
		goPage = "empNotice/empNoticeDetail";
		return goPage;
	}
	
	// 직원용 공지사항 글수정 화면이동 및 업데이트 표시
	@GetMapping("/update")
	public String getEmpNoticeUpdateForm(int empNoticeNo, Model model) {
		log.info("[getEmpNoticeUpdateForm] 실행");
		EmpNoticeVO empNoticeVO = noticeService.selectEmpNoticeDetail(empNoticeNo);
		model.addAttribute("notice", empNoticeVO);
		model.addAttribute("status", "u");
		return "empNotice/empNoticeForm";
	}
	
	// 직원용 공지사항 글수정 처리
	@PostMapping("/update.do")
	public String updateEmpNoticeDetail(
			EmpNoticeVO empNoticeVO,
			Model model,
			HttpServletRequest req,
			RedirectAttributes ra
			) {
		log.info("[updateEmpNoticeDetail] 실행");
		String goPage = "";
		ServiceResult result = noticeService.updateNotice(req, empNoticeVO);
		if(result.equals(ServiceResult.OK)) {
			ra.addFlashAttribute("message", "공지사항 수정이 완료되었습니다.");
			goPage = "redirect:/emp/notice/detail?empNoticeNo="+empNoticeVO.getEmpNoticeNo();
		}else {
			model.addAttribute("empNoticeVO", empNoticeVO);
			model.addAttribute("message", "수정에 실패했습니다. 다시 시도해주세요."	);
			model.addAttribute("status", "u");
			goPage = "empNotice/empNoticeForm";
		}
		
		return goPage;
	}
	
	@RequestMapping("/delete.do")
	public String deleteNoticeDetail(
			int empNoticeNo,
			HttpServletRequest req,
			RedirectAttributes ra,
			Model model
			) {
		String goPage = "";
		ServiceResult result = noticeService.deleteNotice(req, empNoticeNo);
		if(result.equals(ServiceResult.OK)) {
			ra.addFlashAttribute("message", "공지사항이 삭제되었습니다.");
			goPage = "redirect:/emp/notice/list";
		}else {
			ra.addFlashAttribute("message", "삭제하지 못했습니다. 다시 시도해주세요.");
			goPage = "redirect:/emp/notice/detail?empNoticeNo="+empNoticeNo;
		}
		return goPage;
	}
}

