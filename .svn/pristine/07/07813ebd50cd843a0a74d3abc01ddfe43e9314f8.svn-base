package kr.or.ddit.controller.radiation;

import java.util.List;

import javax.annotation.Resource;
import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.controller.utils.UploadFileUtils;
import kr.or.ddit.service.IRadiationService;
import kr.or.ddit.vo.CommentVO;
import kr.or.ddit.vo.EquipmentVO;
import kr.or.ddit.vo.RadiationRoomVO;
import lombok.extern.slf4j.Slf4j;
import net.sf.json.JSONObject;

@Controller
@RequestMapping("/radiation")
@Slf4j
public class RadiationController {

	@Inject
	private IRadiationService radiationService;
	
	@Resource(name = "uploadPath")
	private String resourcePath;
	
	@RequestMapping(value = "/main", method = RequestMethod.GET)
	public String radiationMain(Model model) {
		log.info("방사선 메인");
		
		// 대기환자 리스트 가져오기 (했음)
		
		
		// 대기환자 리스트 model에 담기
		
		
		// 방사선실 리스트 가져오기
		List<RadiationRoomVO> radiationRoomList = radiationService.getRadiationRoomList();
		for (int i = 0; i < radiationRoomList.size(); i++) {
			log.info("radiationRoomName : " + radiationRoomList.get(i).getRocName());
		}
		
		// 방사선실 리스트 model에 담기
		model.addAttribute("radiationRoomList", radiationRoomList);
		
		return "radiation/radiationMain";
	}
	
	// 방사선실 페이지
	@RequestMapping(value = "/radiationRoom", method = RequestMethod.GET)
	public String radiationRoomPage(int roomNo, Model model) {	// roomNo 추가
		log.info("방사선실 페이지");
		log.info("roomNo : " + roomNo);
		
		// 클릭한 방사선실 정보 가져오기
		RadiationRoomVO radiationRoom = radiationService.getRadiationRoomInfo(roomNo);
		log.info(radiationRoom.getRocName());
		
		// 방사선실 정보 model에 담기
		model.addAttribute("radiationRoomInfo", radiationRoom);
		
		// 방사선실에 있는 환자 정보 조회
		
		// model에 담기
		
		// 방사선실에 사용할 멘트 리스트
		List<CommentVO> commentList = radiationService.getCommentList();
		// 모델에 리스트 담기
		for (int i = 0; i < commentList.size(); i++) {
			log.info(commentList.get(i).getCommentContent());
		}
		model.addAttribute("commentList", commentList);
		return "radiation/radiationRoom";
	}
	
	
	// 장비목록 페이지
	@RequestMapping(value = "/equipmentList", method = RequestMethod.GET)
	public String equipmentListPage(Model model) {
		log.info("장비목록 리스트 페이지");
		
		// 방사선실 장비 목록 리스트 가져오기
		List<EquipmentVO> radiationEqList = radiationService.getEqList();
		
		for (int i = 0; i < radiationEqList.size(); i++) {
			log.info("eqName : " + radiationEqList.get(i).getEqName());
		}
		// 장비 목록 리스트 model에 담기
		model.addAttribute("radiationEqList", radiationEqList);
		// 액션 버튼 어떻게 할지 고민해보기 (수리 요청 하는 쪽으로 갈듯?)
		// 장비 하나 클릭 시 모달로 띄워주기
		
		return "radiation/equipmentList";
	}
	
	@ResponseBody
	@RequestMapping(value = "/equipmentInfo", method = RequestMethod.POST)
	public ResponseEntity<JSONObject> equipmentInfo(@RequestBody String eqNo) {
		log.info("eqNo : " + eqNo);

		JSONObject res = new JSONObject().fromObject(eqNo);
		int equipmentNo = Integer.parseInt((String) res.get("eqNo"));
		log.info("eqNo : " + equipmentNo);
		
		EquipmentVO eqVO = radiationService.getEqInfo(equipmentNo);
		JSONObject jsonEqVO = new JSONObject().fromObject(eqVO);
		return new ResponseEntity<JSONObject>(jsonEqVO, HttpStatus.OK);
	}
	
	@RequestMapping(value = "/updateEqInfo", method = RequestMethod.POST)
	public String updateEqInfo(EquipmentVO equipmentVO) {
		log.info(equipmentVO.getEqLocname());
		
		
		// update 전에 장소, 상태에 대한 공통코드 불러오기
		// 기기 설명도 update 해야함!
		
		String locCommonCode = radiationService.getCommonCode(equipmentVO.getEqLocname());
		String statusCommonCode = radiationService.getCommonCode(equipmentVO.getEqStatusname());
		log.info(locCommonCode);
		log.info(statusCommonCode);
		equipmentVO.setEqLoc(locCommonCode);
		equipmentVO.setEqStatus(statusCommonCode);
		
		int updateEqInfoStatus = radiationService.updateEqInfo(equipmentVO);
		int updateEqDescription = radiationService.updateEqDescription(equipmentVO);
		String goPage = "";
		return goPage;
	}
	
	
	// ajax 파일 업로드(수정해야됨)
	@RequestMapping(value = "/uploadAjax", method = RequestMethod.POST,
			produces = "text/plain; charset = utf-8")
	public ResponseEntity<String> uploadAjax(MultipartFile file) throws Exception {
		log.info("originalFileName : " + file.getOriginalFilename());
		
		// savedName은  /2024/03/06/UUID_원본파일명을 리턴한다.
		String savedName = UploadFileUtils.uploadFile(resourcePath, file.getOriginalFilename(), file.getBytes());
		return new ResponseEntity<String>(savedName, HttpStatus.OK);
	}
	
}

